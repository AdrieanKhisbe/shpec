#!/usr/bin/env bash
# see how to ensure bash or zsh?

VERSION=0.1.2
examples=0
failures=0
test_indent=0
red="\033[0;31m"
green="\033[0;32m"
norm="\033[0m"
# TODO: pending, disabled

indent() {
  printf '%*s' $(((test_indent - 1) * 2))
}

iecho() {
  indent && echo "$@"
}
iwarn() {
  indent && echo "${red}$@${norm}" >&2;
}

sanitize() {
  IFS= echo -e "$1" | tr '\n' 'n' | tr "'" 'q'
}

describe() {
  ((test_indent += 1))
  iecho "$1"
}

end() {
  ((test_indent -= 1))
  if [ $test_indent -eq 0 ]; then
    [ $failures -eq 0 ]
  fi
}

end_describe() {
  iecho "Warning: end_describe will be deprecated in shpec 1.0. Please use end instead."
  end
}

stub_command() {
  body="${2:-:}"
  eval "$1() { $body; }"
}
# maybe: add spy?

unstub_command() { unset -f "$1"; }

it() {
  ((test_indent += 1))
  ((examples += 1))
  # TODO: add later arg, or disabled.
  assertion="$1"
}

load(){ # to load a zsh file
  [[ -f "$1" ]] || { iwarn "Missing File $1" ; return 1 }
  iecho "Loading $1" # §later: color blue
  . $1
}

run(){ # just run provided command
  eval $@
}

before() {
  ## maybe: add test that it is first
 ((test_indent += 1))
}

after() {
  ## maybe: add test that it is final?
 ((test_indent += 1))
}

assert() {
  case "x$1" in

  xequal )
    print_result "[[ '$(sanitize "$2")' = '$(sanitize "$3")' ]]" "Expected [$2] to equal [$3]";;

  xunequal )
    print_result "[[ '$(sanitize "$2")' != '$(sanitize "$3")' ]]" "Expected [$2] not to equal [$3]";;

  xgt )
    print_result "[[ $2 -gt $3 ]]" "Expected [$2] to be > [$3]";;

  xlt )
    print_result "[[ $2 -lt $3 ]]" "Expected [$2] to be < [$3]";;

  xmatch )
    print_result "[[ '$2' =~ $3 ]]" "Expected [$2] to match [$3]";;

  xno_match )
    print_result "[[ ! '$2' =~ $3 ]]" "Expected [$2] not to match [$3]";;

  xpresent )
    print_result "[[ -n '$2' ]]" "Expected [$2] to be present";;

  xblank )
    print_result "[[ -z '$2' ]]" "Expected [$2] to be blank";;

  xfile_present )
    print_result "[[ -e $2 ]]" "Expected file [$2] to exist";;

  xfile_absent )
    print_result "[[ ! -e $2 ]]" "Expected file [$2] not to exist";;

  xsymlink )
    link="$(readlink $2)"
    print_result "[[ '$link' = '$3' ]]" "Expected [$2] to link to [$3], but got [$link]";;

  xtest )
    print_result "$2" "Expected $2 to be true";;

  * )
    if type "$1" 2>/dev/null | grep -q 'function'; then
      matcher="$1"; shift
      $matcher "$@"
    else
      print_result false "Error: Unknown matcher [$1]"
    fi;;

  esac
}

print_result() {
  if eval "$1"; then
    iecho -e "$green$assertion$norm"
  else
    ((failures += 1))
    iecho -e "$red$assertion"
    iecho -e "($2)$norm"
  fi
}

SHPEC_ROOT=${SHPEC_ROOT:-$([[ -d './shpec' ]] && echo './shpec' || echo '.')}

case "$1" in

  -v|--version )

    echo "$VERSION";;

  # §TODO: help!!


  # TODO: generate stub structure

  # TODO: debug mode?

  *)

    # Load matcher definitions
    matcher_files="$(find "$SHPEC_ROOT/matchers" -name '*.sh' 2>/dev/null)"

    for matcher_file in $matcher_files; do
      . "$matcher_file"
    done

    files="${@:-$(find $SHPEC_ROOT -name '*_shpec.sh')}"

    time for file in $files; do
      __=$SHPEC_ROOT # __ as current dir
      . "$file"
    done

    [ $failures -eq 0 ] && color=$green || color=$red
    echo -e "${color}${examples} examples, ${failures} failures${norm}"

    [ $failures -eq 0 ]

esac
